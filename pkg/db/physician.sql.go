// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: physician.sql

package doctors

import (
	"context"
)

const createPhysician = `-- name: CreatePhysician :one
INSERT INTO Physician (
  name, email, crm
) VALUES (
  $1, $2, $3
)
RETURNING physician_id, name, email, crm, created_at, updated_at
`

type CreatePhysicianParams struct {
	Name  string
	Email string
	Crm   string
}

func (q *Queries) CreatePhysician(ctx context.Context, arg CreatePhysicianParams) (Physician, error) {
	row := q.db.QueryRowContext(ctx, createPhysician, arg.Name, arg.Email, arg.Crm)
	var i Physician
	err := row.Scan(
		&i.PhysicianID,
		&i.Name,
		&i.Email,
		&i.Crm,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePhysician = `-- name: DeletePhysician :exec
DELETE FROM Physician
WHERE physician_id = $1
`

func (q *Queries) DeletePhysician(ctx context.Context, physicianID int32) error {
	_, err := q.db.ExecContext(ctx, deletePhysician, physicianID)
	return err
}

const getPhysician = `-- name: GetPhysician :one
SELECT physician_id, name, email, crm, created_at, updated_at FROM Physician
WHERE physician_id = $1 LIMIT 1
`

func (q *Queries) GetPhysician(ctx context.Context, physicianID int32) (Physician, error) {
	row := q.db.QueryRowContext(ctx, getPhysician, physicianID)
	var i Physician
	err := row.Scan(
		&i.PhysicianID,
		&i.Name,
		&i.Email,
		&i.Crm,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPhysicians = `-- name: ListPhysicians :many
SELECT physician_id, name, email, crm, created_at, updated_at FROM Physician
ORDER BY name
`

func (q *Queries) ListPhysicians(ctx context.Context) ([]Physician, error) {
	rows, err := q.db.QueryContext(ctx, listPhysicians)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Physician
	for rows.Next() {
		var i Physician
		if err := rows.Scan(
			&i.PhysicianID,
			&i.Name,
			&i.Email,
			&i.Crm,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
